/*
 * Copyright(c) 2006 to 2019 ADLINK Technology Limited and others
 * Copyright(c) 2019 Jeroen Koekkoek
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
 * v. 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause
 */
#ifndef IDL_H
#define IDL_H

#include "dds/ddsrt/attributes.h"
#include "dds/ddsrt/retcode.h"
#include "dds/ddsts/typetree.h"
#include "tt_create.h"

/* yyscan_t is an opaque pointer, a typedef is required here to break a
   circular dependency introduced with bison 2.6 (normally a typedef is
   generated by flex). the define is required to disable the typedef in flex
   generated code */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void *yyscan_t;
#endif

typedef struct idl_file idl_file_t;

/** @private */
struct idl_file {
  idl_file_t *next;
  char *name;
};

typedef struct idl_buffer idl_buffer_t;

/** @private */
struct idl_buffer {
  char *data;
  size_t size; /**< Total number of bytes available */
  size_t used; /**< Number of bytes used */
  size_t lines; /**< Number of lines left in buffer */
};

typedef struct idl_location idl_location_t;

/** @private */
struct idl_location {
  char *first_file;
  int first_line;
  int first_column;
  char *last_file;
  int last_line;
  int last_column;
};

typedef struct idl_parser idl_parser_t;

/** @private */
struct idl_parser {
  idl_file_t *files; /**< List of included files */
  idl_buffer_t buffer; /**< Dynamically sized input buffer */
  idl_location_t location;
  ddsts_context_t *context;
  yyscan_t yylstate; /**< State for Flex generated lexer */
  void *yypstate; /**< State for Bison generated parser */
};

idl_parser_t *idl_create_parser(void);

void idl_destroy_parser(idl_parser_t *parser);

/* implemented in idl.l as it requires access to lexer internals */
int idl_puts(idl_parser_t *parser, const char *str, size_t len)
  ddsrt_nonnull((1,2));

dds_return_t idl_scan_token(idl_parser_t *parser)
  ddsrt_nonnull_all;

dds_return_t idl_scan(idl_parser_t *parser)
  ddsrt_nonnull_all;

dds_return_t idl_parse(const char *str, ddsts_type_t **typeptr)
  ddsrt_nonnull_all;

#endif /* IDL_H */
