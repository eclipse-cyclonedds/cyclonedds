#
# Copyright(c) 2021 ZettaScale Technology and others
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License v. 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
# v. 1.0 which is available at
# http://www.eclipse.org/org/documents/edl-v10.php.
#
# SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause
#

trigger: [ '*' ]
pr: [ '*' ]


variables:
  cyclonedds_uri: '<CycloneDDS><Domain><Internal><EnableExpensiveChecks>rhc,whc</EnableExpensiveChecks><LivelinessMonitoring>true</LivelinessMonitoring></Internal><Tracing><Verbosity>config</Verbosity><OutputFile>stderr</OutputFile></Tracing></Domain></CycloneDDS>'

jobs:
- job: build_and_test
  displayName: Build and test Cyclone
  pool:
    vmImage: $(image)
  strategy:
    matrix:
      #gcc-12.2 is the first version of gcc's static analyzer that accepts this code
      #without -Wno-analyzer-malloc-leak without any false positives.  Ubuntu is far
      #behind in gcc versions, and so falling back to macOS is the most pragmatic
      #option at this time.
      #'Ubuntu 22.04 LTS with GCC 12 (Debug, x86_64)':
      #  image: ubuntu-22.04
      #  analyzer: on
      #  # not enabling "undefined" because of some false positives
      #  sanitizer: address
      #  cc: gcc-12
      #  coverage: on
      'Ubuntu 20.04 LTS with GCC 10 (Release, x86_64)':
        image: ubuntu-20.04
        build_type: Release
        sanitizer: undefined
        cc: gcc-10
      'Ubuntu 22.04 LTS with GCC 13 (Debug, x86_64, Iceoryx)':
        image: ubuntu-22.04
        # No address sanitizer because of this in test run:
        #  Shadow memory range interleaves with an existing memory mapping.
        #  ASan cannot proceed correctly. ABORTING.
        #  ASan shadow was supposed to be located in the [0x00007fff7000-0x10007fff7fff]
        #  range.
        sanitizer: undefined
        iceoryx: on
        cc: gcc-13
        coverage: on
      'Ubuntu 22.04 LTS with GCC 13 (Release, x86_64)':
        image: ubuntu-22.04
        build_type: Release
        sanitizer: undefined
        cc: gcc-13
      'Ubuntu 22.04 LTS with GCC 12 (Debug, x86_64, security only)':
        image: ubuntu-22.04
        sanitizer: address,undefined
        ssl: off
        lifespan: off
        deadline: off
        type_discovery: off
        topic_discovery: off
        idlc_xtests: off # temporary disabled because of passing -t option to idlc in this test for recursive types
        cc: gcc-12
      'Ubuntu 22.04 LTS with GCC 12 (Debug, x86_64, no tests)':
        image: ubuntu-22.04
        cc: gcc-12
        testing: off
        idlc_xtests: off
      'Ubuntu 22.04 LTS with Clang 15 (Debug, x86_64)':
        image: ubuntu-22.04
        analyzer: on
        sanitizer: address,undefined
        cc: clang-15
      'Ubuntu 22.04 LTS with Clang 15 (Debug, x86_64, no security)':
        image: ubuntu-22.04
        sanitizer: address,undefined
        security: off
        cc: clang-15
      'Ubuntu 22.04 LTS with Clang 15 (Release, x86_64, no topic discovery)':
        image: ubuntu-22.04
        build_type: Release
        sanitizer: undefined
        topic_discovery: off
        idlc_xtests: off # temporary disabled because of passing -t option to idlc in this test for recursive types
        cc: clang-15
      'macOS 13 with Clang 15 (Debug, x86_64)':
        image: macos-13
        sanitizer: address,undefined
        deadline_update_skip: on
        cc: clang
      'macOS 13 with Clang 15 (Release, x86_64)':
        image: macos-13
        build_type: Release
        sanitizer: undefined
        deadline_update_skip: on
        cc: clang
        coverage: on
      'macOS 13 with gcc 13 (Debug, analyzer, x86_64)':
        image: macos-13
        deadline_update_skip: on
        cc: gcc-13
        analyzer: on
      # 32-bit Windows: without SSL/security because Chocolateley only provides 64-bit OpenSSL
      'Windows 2022 with Visual Studio 2022 (Debug, x86, no security)':
        arch: x86
        image: windows-2022
        ssl: off
        security: off
        idlc_xtests: off
        generator: 'Visual Studio 17 2022'
        toolset: v141
      'Windows 2022 with Visual Studio 2022 (Debug, x86_64)':
        image: windows-2022
        idlc_xtests: off
        generator: 'Visual Studio 17 2022'
      'Windows 2022 with Visual Studio 2022 (Release, x86_64, no tests)':
        image: windows-2022
        build_type: Release
        testing: off
        idlc_xtests: off
        generator: 'Visual Studio 17 2022'
      'Windows 2019 with Visual Studio 2019 (RelWithDebInfo, x86_64)':
        image: windows-2019
        build_type: RelWithDebInfo
        idlc_xtests: off
        generator: 'Visual Studio 16 2019'
      #'Windows 2019 with GCC 10 (Debug, x86_64)':
      #  image: windows-2019
      #  build_type: Debug
      #  idlc_xtests: off
      #  generator: 'MinGW Makefiles'
      #  cc: 'C:/msys64/mingw64/bin/gcc.exe'
      #  cxx: 'C:/msys64/mingw64/bin/g++.exe'
      'Ubuntu 22.04 LTS with default GCC (Release, Iceoryx, Static, x86_64)':
        image: ubuntu-22.04
        idlc_xtests: off
        build_type: Release
        sharedlibs: off
        iceoryx: on

  steps:
    - template: /.azure/templates/build-test.yml

- job: coverage_and_test_report
  displayName: Coverage and Tests Report
  dependsOn: build_and_test
  condition: succeededOrFailed()  # Always run, even when failed tests, because they should be reported in the dasboard of course!
  pool:
    vmImage: ubuntu-20.04
  steps:
  - bash: |
      mkdir coverage
  - task: DownloadPipelineArtifact@2
    inputs:
      path: coverage
    displayName: Download Coverage
  - task: UsePythonVersion@0
  - bash: |
      python -m pip install gcovr==5.0 --user --upgrade
      ls coverage
      gcovr -a coverage/**/*.json --xml-pretty --output coverage.xml
    displayName: Combine coverage reports
  - task: PublishCodeCoverageResults@1
    displayName: Publish Cobertura Coverage Report
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: coverage.xml

- job: python_binding
  displayName: Python Binding
  pool:
    vmImage: $(image)
  strategy:
    matrix:
      'Test and fuzzing (Ubuntu 22.04 LTS, Clang 13, Debug)':
        image: ubuntu-22.04
        cc: clang-13
        build_type: Debug
  steps:
    - template: /.azure/templates/python-binding.yml

- job: cxx_binding
  displayName: C++ Binding
  pool:
    vmImage: $(image)
  strategy:
    matrix:
      'Build and test (Ubuntu 22.04 LTS, Clang 13, Debug)':
        image: ubuntu-22.04
        cc: clang-13
        build_type: Debug
  steps:
    - template: /.azure/templates/cxx-binding.yml
