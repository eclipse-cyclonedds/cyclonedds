#
# Copyright(c) 2021 ADLINK Technology Limited and others
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License v. 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
# v. 1.0 which is available at
# http://www.eclipse.org/org/documents/edl-v10.php.
#
# SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause
#

#
# Template with basic build and test instructions to be included by pipelines.
#

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
    name: install_python
  # Set defaults from steps to share them among pipelines
  - bash: |
      [[ -n "${ARCH}" ]] || \
        echo "###vso[task.setvariable variable=arch;]x86_64"
      [[ -n "${BUILD_TYPE}" ]] || \
        echo "###vso[task.setvariable variable=build_type;]Debug"
    name: setup
  - bash: |
      echo "###vso[task.setvariable variable=pip_cache;]${HOME}/.cache/pip"
      echo "###vso[task.setvariable variable=conan_cache;]${HOME}/.conan/data"
      echo "###vso[task.setvariable variable=PATH;]$(python3 -m site --user-base)/bin:${PATH}"
      echo "###vso[task.setvariable variable=build_tool_options;]-j 4"
      sudo apt-get install -y clang-tools clang-tidy
    condition: eq(variables['Agent.OS'], 'Linux')
    name: setup_linux
  - bash: |
      echo "###vso[task.setvariable variable=pip_cache;]${HOME}/Library/Caches/pip"
      echo "###vso[task.setvariable variable=conan_cache;]${HOME}/.conan/data"
      echo "###vso[task.setvariable variable=PATH;]$(python3 -m site --user-base)/bin:${PATH}"
      echo "###vso[task.setvariable variable=build_tool_options;]-j 4"
      sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate off
      brew install bison
    condition: eq(variables['Agent.OS'], 'Darwin')
    name: setup_macos
  # Use PowerShell rather than Bash to ensure Windows-style paths
  - pwsh: |
      $python_bin = python -m site --user-base
      Write-Host "###vso[task.setvariable variable=pip_cache;]${env:LOCALAPPDATA}\\pip\\Cache"
      Write-Host "###vso[task.setvariable variable=conan_cache;]${env:USERPROFILE}\\.conan\\data"
      Write-Host "###vso[task.setvariable variable=PATH;]$python_bin\\bin;${env:PATH}"
      # Visual Studio is most likely used on Windows agents
      if (${env:GENERATOR} -match "2019" -and -not ${env:PLATFORM}) {
        # Make sure platform matches arch if not specified
        if (${env:ARCH} -match "arm*") {
          Write-Host "###vso[task.setvariable variable=platform;]ARM"
        } elseif (${env:ARCH} -eq "x86") {
          Write-Host "###vso[task.setvariable variable=platform;]x86"
        } else {
          Write-Host "###vso[task.setvariable variable=platform;]x64"
        }
      }
      Write-Host "###vso[task.setvariable variable=build_tool_options;]-nologo -verbosity:minimal -maxcpucount:4 -p:CL_MPCount=4"
      choco install winflexbison3
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    name: setup_windows
  - task: Cache@2
    inputs:
      key: pip | 2 | $(Agent.OS)
      path: $(pip_cache)
    name: cache_pip
  - task: Cache@2
    inputs:
      key: conan | 3 | $(Agent.OS) | $(arch) | $(build_type)
      path: $(conan_cache)
    name: cache_conan
  - bash: |
      set -e -x
      pip install conan --user
      conan profile new default --detect
    name: install_conan
  - bash: |
      set -e -x
      mkdir build
      cd build
      conan install -b missing -s arch=${ARCH} -s build_type=${BUILD_TYPE} ../${CONANFILE:-conanfile.txt}
      cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
            -DCMAKE_INSTALL_PREFIX=install \
            -DANALYZER=${ANALYZER:-off} \
            -DSANITIZER=${SANITIZER:-none} \
            -DENABLE_SSL=${SSL:-on} \
            -DENABLE_SECURITY=${SECURITY:-on} \
            -DENABLE_LIFESPAN=${LIFESPAN:-on} \
            -DENABLE_DEADLINE_MISSED=${DEADLINE_MISSED:-on} \
            -DENABLE_TYPE_DISCOVERY=${TYPE_DISCOVERY:-on} \
            -DENABLE_TOPIC_DISCOVERY=${TOPIC_DISCOVERY:-on} \
            -DENABLE_COVERAGE=${COVERAGE:-off} \
            -DBUILD_TESTING=on \
            -DBUILD_EXAMPLES=on \
            -DWERROR=on \
            ${GENERATOR:+-G} "${GENERATOR}" -A "${PLATFORM}" -T "${TOOLSET}" ..
      ${SCAN_BUILD} cmake --build . --config ${BUILD_TYPE} --target install -- ${BUILD_TOOL_OPTIONS}
    name: script
  - bash: |
      set -e -x
      cd build
      ctest -j 4 --output-on-failure -T test -E '^CUnit_ddsrt_random_default_random$' -C ${BUILD_TYPE}
      [[ "${BUILD_TYPE}" != 'Release' ]] || \
        ${SHELL} ../src/tools/ddsperf/sanity.bash
      [[ "${SSL:-on}" != 'on' || "${SECURITY:-on}" != 'on' ]] || \
        diff --strip-trailing-cr ../etc/cyclonedds.rnc docs/cyclonedds.rnc && \
        diff --strip-trailing-cr ../etc/cyclonedds.xsd docs/cyclonedds.xsd && \
        diff --strip-trailing-cr ../docs/manual/options.md docs/manual/options.md
      [[ "${SANTIZIER:-none}" == 'none' ]] || \
        export CFLAGS="-fsanitize=${SANITIZER}" LDFLAGS="-fsanitize=${SANITIZER}"
      INSTALLPREFIX="$(pwd)/install"
      mkdir helloworld
      cd helloworld
      cmake -DCMAKE_PREFIX_PATH="${INSTALLPREFIX}" \
            -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
            ${GENERATOR:+-G} "${GENERATOR}" "${INSTALLPREFIX}/share/CycloneDDS/examples/helloworld"
    name: test
