#
# Copyright(c) 2021 ZettaScale Technology and others
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License v. 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
# v. 1.0 which is available at
# http://www.eclipse.org/org/documents/edl-v10.php.
#
# SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause
#

steps:
  - bash: |
      echo "###vso[task.setvariable variable=conan_cache;]${HOME}/.conan/data"
    condition: ne(variables['Agent.OS'], 'Windows_NT')
    name: set_conan_cache_unix
  - pwsh: |
      Write-Host "###vso[task.setvariable variable=conan_cache;]${env:USERPROFILE}\\.conan\\data"
      # Set CONAN_BASH_PATH to avoid having to build msys2 for Conan packages.
      Write-Host "###vso[task.setvariable variable=CONAN_BASH_PATH;]C:\\msys64\\usr\\bin\\bash.exe"
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    name: set_conan_cache_windows
  # Caching
  - task: Cache@2
    inputs:
      key: conan | 4 | $(Agent.OS) | $(arch) | $(cc) | $(build_type)
      path: $(conan_cache)
    name: cache_conan
  - bash: |
      set -e
      pip install "conan==1.59.0" --user
      # Derive build profile architechture from system architecture.
      case "${AGENT_OSARCHITECTURE}" in
        X86) build_arch=x86 ;;
        X64) build_arch=x86_64 ;;
        ARM) build_arch=armv8 ;;
      esac
      # Export Conan profile names for convenience.
      #   * Build platform: Platform on which the compilation tools will run.
      #   * Host platform: Platform on which the generated binaries will run.
      #
      # https://docs.conan.io/en/latest/systems_cross_building/cross_building.html
      echo "###vso[task.setvariable variable=build_profile;]${build_arch}"
      echo "###vso[task.setvariable variable=host_profile;]${ARCH}"
      # Automatically detect the build profile. Make sure CC and CXX
      # environment variables are set correctly on Microsoft Windows if a
      # different compiler than Visual Studio is desired.
      conan profile new ${build_arch} --detect
      [[ "$(conan profile get settings.compiler ${build_arch})" != "gcc" ]] || \
        conan profile update settings.compiler.libcxx=libstdc++11 ${build_arch}
      [[ "$(conan profile get settings.compiler ${build_arch})" != "Visual Studio" ]] || \
      [[ "${TOOLSET}" = "" ]] || \
        conan profile update settings.compiler.toolset=${TOOLSET} ${build_arch}
      # Generate a host profile if the architectures diverge.
      if [ "${ARCH}" != "${build_arch}" ]; then
        conan profile new ${ARCH} --detect
        conan profile update settings.arch=${ARCH} ${ARCH}
        conan profile update settings.arch_build=${ARCH} ${ARCH}
        [[ "$(conan profile get settings.compiler ${ARCH})" != "gcc" ]] || \
          conan profile update settings.compiler.libcxx=libstdc++11 ${ARCH}
        [[ "$(conan profile get settings.compiler ${build_arch})" != "Visual Studio" ]] || \
        [[ "${TOOLSET}" = "" ]] || \
          conan profile update settings.compiler.toolset=${TOOLSET} ${ARCH}
      fi
    name: install_conan
